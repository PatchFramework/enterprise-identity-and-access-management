upstream adminer {
    server adminer:8080;
}
 
upstream jupyter {
    server jupyter:8888;
}
 
server {
       listen   80;
       root     /opt/nginx/html;
       resolver 127.0.0.11  valid=1s    ipv6=off;
 
      # I disabled caching so the browser won't cache the site.
      expires           0;
      add_header        Cache-Control private;    
      
      # 
      location /adminer/ {
          access_by_lua_block {
            local opts = {
            redirect_uri_path = "/adminer/redirect_uri",
            accept_none_alg = true,
            discovery = "http://keycloak:8080/realms/nginx/.well-known/openid-configuration",
            client_id = "adminer",
            client_secret = "YD4PNufIPQlsCZVfGio3F8HMpb5UpTQV",
            redirect_uri_scheme = "http",
            logout_path = "/adminer/logout",
            redirect_after_logout_uri = "http://localhost:8080/realms/nginx/protocol/openid-connect/logout",
            redirect_after_logout_with_id_token_hint = false,
            session_contents = {id_token=true, access_token=true}
            }
            -- call introspect for OAuth 2.0 Bearer Access Token validation
            local res, err = require("resty.openidc").authenticate(opts)
            
            -- handle authorization
            local jwt = require "resty.jwt"
            local jwt_obj = jwt:load_jwt(res.access_token)
            local cjson = require "cjson"
            local roles = jwt_obj.payload.realm_access.roles
            -- ngx.print(cjson.encode(roles)) 

            -- handle authorization
            function enforce_role(list, role)
                local roles_set = {}
                for _, l in ipairs(list) do roles_set[l] = true end
                
                -- send error 403 if user doesnt have required role
                if (not roles_set[role]) then 
                    ngx.header["Content-type"] = 'text/plain'
                    ngx.say("Error 403: access forbidden because user has insufficient permissions")
                    ngx.exit(ngx.HTTP_FORBIDDEN)
                end
            end

            enforce_role(roles, "adminer-user")
            
            if err then
            ngx.status = 403
            ngx.say(err)
            ngx.exit(ngx.HTTP_FORBIDDEN)
            end; }

          proxy_pass      http://adminer;
          proxy_set_header    X-Forwarded-For         $remote_addr;
      }    
      
      location /jupyter/ {
        
        access_by_lua_block {
         local opts = {
           redirect_uri_path = "/jupyter/redirect_uri2",
           accept_none_alg = true,
           discovery = "http://keycloak:8080/realms/nginx/.well-known/openid-configuration",
           client_id = "jupyter",
           client_secret = "YTmqSfFRpRggwc029bWMV02bomHyF7a1",
           redirect_uri_scheme = "http",
           logout_path = "/jupyter/logout",
           redirect_after_logout_uri = "http://localhost:8080/realms/nginx/protocol/openid-connect/logout",
           redirect_after_logout_with_id_token_hint = false,
           session_contents = {id_token=true, access_token=true}
        }
        -- call introspect for OAuth 2.0 Bearer Access Token validation
        local res, err = require("resty.openidc").authenticate(opts)
        -- local res, err = require("resty.openidc").bearer_jwt_verify(res)
        local jwt = require "resty.jwt"
        local jwt_obj = jwt:load_jwt(res.access_token)
        local cjson = require "cjson"
        local roles = jwt_obj.payload.realm_access.roles
        -- ngx.print(cjson.encode(roles)) 

        -- handle authorization
        function enforce_role(list, role)
            local roles_set = {}
            for _, l in ipairs(list) do roles_set[l] = true end
            
            -- send error 403 if user doesnt have required role
            if (not roles_set[role]) then 
                ngx.header["Content-type"] = 'text/plain'
                ngx.say("Error 403: access forbidden because user has insufficient permissions")
                ngx.exit(ngx.HTTP_FORBIDDEN)
            end
        end

        enforce_role(roles, "jupyter-user")
        
        -- if roles['jupyter'] ~= "jupyter-user" then
        --     ngx.status = 403
        --     ngx.say(err)
        --     ngx.exit(ngx.HTTP_FORBIDDEN)
        -- end

        if err or not res then
        ngx.status = 403
        ngx.say(err)
        ngx.exit(ngx.HTTP_FORBIDDEN)
        end;}

        proxy_pass      http://jupyter;
        proxy_set_header    X-Forwarded-For         $remote_addr;
      }
      # redirect server error pages to the static page /40x.html
      #
      error_page 404 /404.html;
          location = /40x.html {
      }
 
      # redirect server error pages to the static page /50x.html
      #
      error_page 500 502 503 504 /50x.html;
          location = /50x.html {
            root /usr/share/nginx/html;
      }
}
 
# server {
#        listen   80;
#        root     /opt/nginx/html;
#        resolver 127.0.0.11  valid=1s    ipv6=off;
       
#        access_by_lua '
#          local opts = {
#            redirect_uri_path = "/redirect_uri2",
#            accept_none_alg = true,
#            discovery = "http://keycloak:8080/realms/nginx/.well-known/openid-configuration",
#            client_id = "wordpress",
#            client_secret = "YTmqSfFRpRggwc029bWMV02bomHyF7a1",
#            redirect_uri_scheme = "http",
#            logout_path = "/logout",
#            redirect_after_logout_uri = "http://localhost:8080/realms/nginx/protocol/openid-connect/logout?redirect_uri=http://localhost/",
#            redirect_after_logout_with_id_token_hint = false,
#            session_contents = {id_token=true}
#          }
#          -- call introspect for OAuth 2.0 Bearer Access Token validation
#          local res, err = require("resty.openidc").authenticate(opts)
#          if err then
#            ngx.status = 403
#            ngx.say(err)
#            ngx.exit(ngx.HTTP_FORBIDDEN)
#          end
#       ';
 
#       # disabled caching so we are asked to authenticate every time
#       expires           0;
#       add_header        Cache-Control private;
      
#       location / {
#         proxy_pass      http://drupal;
#         proxy_set_header    X-Forwarded-For         $remote_addr;
#       }

#       # redirect server error pages to the static page /40x.html
#       error_page 404 /404.html;
#           location = /40x.html {
#       }
 
#       # redirect server error pages to the static page /50x.html
#       error_page 500 502 503 504 /50x.html;
#           location = /50x.html {
#             root /usr/share/nginx/html;
#       }
# }